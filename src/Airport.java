import java.lang.reflect.Array;
import java.util.ArrayList;

public class Airport
{
    /** A list of the flights into and out of this airport
     *  Guaranteed not to be null and to contain only non-null entries
     */
    private ArrayList<Flight> allFlights;

    public Airport(ArrayList<Flight> flights) {
        allFlights = flights;
    }

    public ArrayList<Flight> getAllFlights() {
        return allFlights;
    }

    /** Returns the revenue generated by all flights at the airport,
     *  as described in part (a)
     */
    public double getTotalRevenue() {
        double total = 0;
        for(Flight flight : allFlights){
            int passengers = 0;
            if (flight.getNumPassengers() > flight.getCapacity()){
                passengers = flight.getCapacity() ;
            }
            else{
                passengers = flight.getNumPassengers();
            }
            total += passengers * flight.getPrice();
        }
        return total;
    }

    /** Updates the list of flights by removing certain flights and
     *  returns the total number of passengers whose flights were removed,
     *  as described in part (b)
     */
    public int updateFlights(){
        int totalRemoved = 0;
        for(int i = 0; i < allFlights.size(); i++){
            Flight current = allFlights.get(i);
            if(current.getNumPassengers() < 0.2 * current.getCapacity()){
                totalRemoved += allFlights.remove(i).getNumPassengers();
            }
        }
        return totalRemoved;
    }
}